
먼저 프로젝트를 만들고 디버깅을 해 준다.
그러면 홈피가 뜨면 제대로 만든 거 맞고

F5 로는 서버를 켠다.
Shift + F5 로는 서버를 다운시킨다.
디버거는 여기서 굉장히 유용한 도구가 된다.

1. 

SolutionExplorer 의 Controllers 폴더 마우스 오른쪽 찍고
	Addb > Controller
	
	Study01Controller 추가한다.
	
	1.1
	
	public string Test01() 
	{ 
		return "HelloWorld";
	}

	추가후에 아래와 같이 요청한다.
	
	http://localhost:49809/Study01/Test01
	
	즉 {Controller}/{Method} 이름의 형태의 요청이 해당 함수를 호출함을 알 수 있다.
	
	1.2

	public string Test02()
	{
		return Convert.ToString( this.GetHashCode() );
	}

	위의 함수를 가지고 테스트 해 본다.
	계속 값이 바뀔거다.
	이것은 ASP 의 특성과도 맞닿아 있는 건데
	인스턴스가 계속 새로이 생성되고 있다는 얘기가 된다. JSP 와 결정적으로 틀리다.
	
	1.3
	
	http://localhost:49809/Study01/Test03/10101
	
	위와 같은 형태의 요청에 아래 형태의 함수가 호출된다. 
	즉 id 라는 이름의 매개변수를 가진 경우에는 
	Test03 이후의 /10101 로 넘겨진 숫자값은 매개변수 id 로 넘어간다.
	단 id 라는 매개변수명은 바꾸어서는 안된다.
	
	public string Test03(int id)
	{
		return Convert.ToString( id );
	}
	
	즉
	
	public string Test03(int id2)
	{
		return Convert.ToString( id2 );
	}
	
	이거는 에러가 나는 경우가 된다.
	
	1.4
	
	http://localhost:49809/Study01/Test04/10102?title=apple
	
	위와 같은 요청의 경우 ? 뒤의 QueryString 에 적힌 내용은
	Controller 함수의 매개변수로 전달된다 ( @RequestParam 같은 경우다 )
	
	public string Test04(int id, string title )
	{
		return Convert.ToString(id) + ":" + title ;
	}

	java 문법과는 달리 여기서는 매개변수의 변수명이 중요한 의미를 갖는다.
	매개변수의 변수명과 넘기는 데이터의 key 값이 동일해야 한다.
	( 이런 부분은 PHP 와 유사하다 )
	
	1.5
	
	namespace 찾을때 쓰는 단축키는 Shift + ALT + F10
	
	public class TempPVO
    {
        public string name { get; set; }
        public int age { get; set; }

        public override string ToString()
        {
            return name + ":" + Convert.ToString(age);
        }
    }
	
	위와같이 파라메터를 전달할 수 있는 PVO 를 만든다.
	
	http://localhost:49809/Study01/Test05?name=apple&age=100	
	
	이렇게 하면 아래와 같이 함수를 만들면
	매개변수의 property 값으로 자동 주입된다.
	
	public string Test05(TempPVO pvo)
	{
		return pvo.ToString();
	}

	즉 ASP.NET MVC 에서는 @ModelAttribute 가 따로 없고 모든 매개변수가 그러하다.
	
	1.6
	
	public string Test06()
	{
		return Request.HttpMethod;
	}	
	
	위와같이 ASP 에서 처럼 내장객체를 사용할 수 있는데
	마치 멤버변수 처럼 이용해도 된다.
	왜냐?? 인스턴스는 매번 새롭게 생성되고 있다. 따라서 변수가 공유되는 문제는 없다.
	
	http://localhost:49809/Study01/Test06
	
	ASP 에서 쓰는 것 처럼 
	Server, Session, Request, Response 를 그대로 다시 쓸 수 있다.
	
	1.7
	
	단 Application 객체는 ASP 때와 약간 틀리다.
	
	Global.asa 파일에 아래의 코드를 추가한다.
	이 파일은 서버 전체의 설정을 담고 있고, Application_Start() 는 서버가 켜질때 동작한다.
	
	protected void Application_Start()
	{
		AreaRegistration.RegisterAllAreas();
		RegisterRoutes(RouteTable.Routes);

		Application["Count"] = 0;
	}
	
	컨트롤러는 아래와 같이 구성한다.
	
	public string Test07()
	{
		System.Web.HttpContext.Current.Application.Lock();

		var i = System.Web.HttpContext.Current.Application["Count"];
		int j = Convert.ToInt32(i) + 1;
		System.Web.HttpContext.Current.Application["Count"] = j;
		
		System.Web.HttpContext.Current.Application.UnLock();

		return Convert.ToString(j);
	}
	
	즉 그냥 Application 이라고 하면 안되고
	System.Web.HttpContext.Current.Application 이라 써야 한다.
	
	( 뭐 왜 이렇게 해야 하는지 심증은 간다. 클래스 안에 넣으려니 그러러니 한다. )
	
	
	1.8
	
	[HttpPost]
	public string Test08()
	{
		return "Study01:Test08():";
	}	
	
	위와 같이 [] 로 어노테이션을 지정할 수 있다.
	이건 @RequestMethod 와 동일한 개념이다 즉 Post 방식의 요청에 의해서만 동작한다는 거다.
	
	[HttpGet] 도 있고, [HttpPost] 도 있다.
	
	
	1.9
	
	public void Test09()
	{
		Response.Redirect("http://daum.net/");
	}
	
	그러니까 위와 같이 Response 를 이용한 작업도 가능한데
	같은 Application 의 페이지로 리다이렉션 하는 건 다른 방법을 더 많이 쓴다.
	
	1.10
	
	public ActionResult Test10()
	{
		return RedirectToAction("Index", "Home");
	}
	
	RedirectToAction 은 함수이다.
	
	return RedirectToAction("Index") 
	: 같은 컨트롤러의 Index 함수로 요청을 발생하도록 브라우저에 지시
	
	return RedirectToAction("Index", "Home");
	: Home 컨트롤러의 Index 함수로 요청을 발생하도록 브라우저에 지시한다.
	
	
	1.11
	
	아래의 코드는 ?data=10101 형태로 QueryString 을 넘기는 것을 처리한다.
	헌데 이 값이 null 이 되게 되는 경우에 ModelState 에 ModelError 를 넣어주게 되면
	그 다음에 넘겨받은 View 에서 에러가 있는 경우에는 그 에러를 추출할 수 있게 된다.
	
	
	public ActionResult Test11( int? data )
	{
		if (data == null)
		{
			ModelState.AddModelError("data", "we don't accept null value");
		}

		if (ModelState.IsValid) {
			return View( data );
		}
		else{
			//  이 경우는 여기서는 보이지는 않지만  ValidationMessage 도 같이 넘어간다.
			return View(0);
		}
	}
	
	이것을 넘겨받은 페이지는 이렇게 구성된다.
	
<%@ Page Title="" Language="C#" MasterPageFile="~/Views/Shared/Site.Master" 
	Inherits="System.Web.Mvc.ViewPage<dynamic>" %>
<asp:Content ID="Content1" ContentPlaceHolderID="TitleContent" runat="server">
	Test11
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="MainContent" runat="server">
	<%=Html.ValidationMessage("data")%>
	<%=Model.ToString()%>
</asp:Content>

	이걸 설명하자면 
	
	A. data 값을 넘기지 않고 http://localhost:49809/Study01/Test11 처럼 요청하면
	- ModelError 가 등록된다.
	- Model.IsValid 가 False 가 된다.
	- View(0) 가 리턴이 된다.
	- View 에 해당하는 페이지는 System.Web.Mvc.ViewPage<int> 이다.
	  즉 Model 은 int 에 해당하게 된다.
	- Model.ToString() 을 하게 되면 View 의 매개변수의 값을 받아서 0 이 출력된다.
	- 또한 ValidationMessage 도 출력되게 된다.
	
	B. http://localhost:49809/Study01/Test11?data=100 와 같이 요청한다.
	- ModelError 는 발생하지 않는다.
	- Model.IsValid 가 True 된다.
	- View(data) 가 되면서 null 아닌 값이 전달된다.
	- Model.ToString() 하게 되면 100 이 찍히게 되고
	- ValidationMessage 는 없다.
	
	이와 같이 ValidationMessage 를 보내는데 이때 User.user_name 과 같이
	테이블과 연결시킨 데이터 형태로도 보낼 수 있다.
	
	if (ModelState.IsValidField("User.user_name") )
	{
		
	}
	
	
	
	
	
	